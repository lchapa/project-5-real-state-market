const fs = require('fs');

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('Verifier');

// Test verification with correct proof
contract('TestVerifier', accounts => {
    const account_one = accounts[0];
    describe('Verifier contract generated by Zokrates', function () {
    	let proofs = [];
    	before(function() {
    		const proofsFor = JSON.parse(fs.readFileSync(__dirname + '/../zokrates/proofsFor.json'));
    		for(let i = 0; i < proofsFor.total; i++) {
    			proofs.push(JSON.parse(fs.readFileSync(__dirname + '/../zokrates/proof' + proofsFor.inputs[i].a + proofsFor.inputs[i].b +'.json')));
    		}    	
    	});
    	
        beforeEach(async function () { 
            this.contract = await verifier.new({from: account_one});
            assert.isNotNull(this.contract, "Could not create verifier contract");
        })

        // - use the contents from proof.json generated from zokrates steps
        it('use the contents from proof.json generated from zokrates steps', async function () { 
        	for(var p of proofs) {
        		var result = await this.contract.verifyTx(p.proof, p.inputs);
        		assert.isTrue(result, "Proof is not passing verificationTX");
        	}
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () { 
        	let p = proofs[0];
        	p.proof.a = [8,8];
        	try {
        		await this.contract.verifyTx(p.proof, p.inputs);        		
        		assert.isNotOk("NOT having lauched exception for altered proof");
        	} catch(e) {
        		console.log(e.message);
        		assert.isOk("Launch exception for altered proof");
        	}
        });

        // Test verification with incorrect inputs
        it('Test verification with incorrect input', async function () { 
        	let p = proofs[1];
        	try {
        		var result = await this.contract.verifyTx(p.proof, ["8","8"]);        		
        		assert.isFalse(result, "Incorrects inputs, verification result is false");
        	} catch(e) {
        		console.log(e.message);
        		assert.isNotOk("No error but false response from verification");
        	}
        });
    });
});





    
